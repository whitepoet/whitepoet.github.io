<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A Benchmark for Stateful Protocol</title>
    <url>/A-Benchmark-for-Stateful-Protocol/</url>
    <content><![CDATA[<h2 id="文献题目"><a href="#文献题目" class="headerlink" title="文献题目"></a>文献题目</h2><p>Fuzzification:Anti-Fuzzing Techniques</p>
<h2 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h2><p>arxiv</p>
<h2 id="文献作者"><a href="#文献作者" class="headerlink" title="文献作者"></a>文献作者</h2><p>Roberto Natella、Van-Thuan Pham</p>
<p>unina、unime</p>
<h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>本文提出了一种新的对网络协议进行有状态fuzz的基准。基准测试包括一套代表性的、用于流行协议的开源网络服务器，以及自动化实验的工具。</p>
<h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>测试协议实现的安全性很有挑战性，因为协议通常是有状态的。这意味着，与无状态程序相比，测试的输入空间不仅限于单个消息的格式（这些消息本身可能非常大），而且通过几个消息的潜在组合进一步扩大。因此，协议安全性测试需要通过考虑协议状态来有效地测试这种输入空间的技术。</p>
<p>近些年的研究都主要集中在fuzz上，而种子主要是来源于协议状态机等模型生成或从初始的种子中进行变异。</p>
<p>现在的基准主要关注无状态的测试，如Google FuzzBench、the DARPA Cyber Grand Challenge corpus、Magma，主要测试目标都是多媒体文件格式、数据压缩工具、操作系统实用程序等。</p>
<p>本文提出了一种新的网络协议状态模糊化基准（ProFuzzBench）。该基准测试提供了一套实现流行网络协议的开源程序，以及完全自动化执行模糊化实验的工具。作者选择了代表先前有状态模糊化研究中采用的程序，以及商业和开源模糊程序针对的网络协议。基于在这些项目中的经验，作者讨论了有状态网络协议模糊化的一些开放性研究问题，以及未来可能的发展方向。作者以开源的方式发布了基准，邀请社区使用它来评估新的模糊技术，并进一步扩展它以获得更多的目标。</p>
<h3 id="benchmark-targets"><a href="#benchmark-targets" class="headerlink" title="benchmark targets"></a>benchmark targets</h3><p>下表列出了选择的协议和相应的实现程序。表中简要的描述了协议的状态。虽然dns协议是无状态的，但是实现程序是有状态的，比如提供缓存以查询记录。</p>
<p><img src="/A-Benchmark-for-Stateful-Protocol/1.png" alt="list of protocol"></p>
<h3 id="automation"><a href="#automation" class="headerlink" title="automation"></a>automation</h3><p>协议模糊基准已作为一组实用程序发布，用于自动化目标软件的编译、配置、执行和分析（下图）。这些实用程序基于Docker自动化目标软件和模糊工具的部署，以实现可重复的实验，并支持在受控条件下对不同模糊技术进行比较分析。</p>
<p><img src="/A-Benchmark-for-Stateful-Protocol/2.png" alt="workflow"></p>
<p>第一阶段是容器镜像的构建。目前包括在基准中的测试工具是aflnew和aflnet。基准测试为每个目标软件提供了一组补丁，这些补丁在此状态下应用。对于大多数的目标软件，补丁程序通过在源代码中嵌入固定的种子来消除程序的随机性。去随机化对于具有可再现的行为很重要，此外，去随机化支持不同模糊技术的比较，因为它使得模糊者比其他模糊技术表现更好的可能性更小，而不是因为它的优点。在某些情况下，补丁减少或消除程序中的延迟，这些延迟在网络设置中用于同步，但不必要地减慢模糊，因为模糊可以在本地以较小的延迟执行。其他补丁使程序与fuzzers兼容。例如，AFL使用UNIX信号来管理目标进程并检测其故障。因此，应禁用这些信号的任何自定义处理程序，以避免干扰基于AFL的模糊工具。</p>
<p>此外，补丁支持协议模糊工具来跟踪协议状态，以最大限度地提高状态覆盖率。例如，RTSP协议对所有成功的请求使用相同的响应代码200，而不管当前服务器状态如何。为了使有状态的模糊化更有效，我们的基准测试会对目标（Live555服务器）进行修补，以发送具有不同状态代码的响应，例如，处理播放命令时发送201，处理暂停命令时发送203。</p>
<p>然后就是在容器中对程序进行编译，第一次使用afl编译器进行编译，以便进行fuzz；第二次用带有gcov支持的编译，它将在最后使用以计算覆盖率。</p>
<p>第二阶段就是测试，同一个实验重复多次，实验结束后导出实验数据。</p>
<p>最后阶段就是分析原始数据，并对第二次编译的目标程序再次运行输入以获得更多的关于覆盖率的数据，最后生成csv文件进行比较。</p>
<h3 id="discussion"><a href="#discussion" class="headerlink" title="discussion"></a>discussion</h3><p>作者发现了一些问题。</p>
<p>configuration and multi-party protocols.对于现实世界中的网络服务器，配置空间可能相当复杂。由于配置会影响攻击面，因此它间接地成为模糊化的关注点。</p>
<p>特别是，协议可能需要运行两个以上的parties。现有的模糊技术只采用客户机-服务器方案，其中模糊程序充当客户机。然而，在SIP协议的情况下，至少需要三方：被测服务器、“调用者”和“被调用者”。一个或多个“被呼叫者”和“呼叫者”必须首先在服务器上注册；然后，呼叫者可以通过指示被呼叫者的名称与服务器联系；服务器将充当被呼叫者和呼叫者之间的代理，以便在他们之间建立通信（例如，VoIP呼叫）。在此过程中，服务器将处理“振铃”、“被叫方忙的可能性”等。下图是工具和Kamailio SIP目标软件之间的交互示例，作者使用了一个脚本解决了这个问题。</p>
<p><img src="/A-Benchmark-for-Stateful-Protocol/3.png" alt="SIP协议交互示例"></p>
<p>Deterministic execution.对一个完整的网络服务器进行模糊化的另一个挑战是不确定性行为，因为线程和基于事件的I/O的广泛使用。当相同的输入应用于目标软件时，其不确定性导致程序路径覆盖范围的变化，这反过来阻碍了覆盖驱动的模糊化。因此，AFL对扩展覆盖范围的每个新输入执行“校准”，以评估执行是否确定，并报告异常新输入的百分比（稳定性度量）。本文的基准采用了对AFL的一个建议：<a href="https://github.com/mirrorer/afl/blob/master/docs/status_screen.txt">Michal Zalewski. 2020. AFL Documentation - Understanding the status screen</a>，在可能的情况下禁用线程。</p>
<p>State identification.协议模糊化的目标是生成覆盖协议状态的测试用例。作者的实现中还面临着识别协议当前状态的问题。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p><a href="https://github.com/profuzzbench/profuzzbench">https://github.com/profuzzbench/profuzzbench</a></p>
]]></content>
      <categories>
        <category>文献阅读笔记</category>
      </categories>
      <tags>
        <tag>state fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2018-1111复现</title>
    <url>/CVE-2018-1111%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="编号"><a href="#编号" class="headerlink" title="编号"></a>编号</h2><p>CVE-2018-1111</p>
<h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><p>命令注入</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>远程命令执行</p>
<h3 id="影响设备"><a href="#影响设备" class="headerlink" title="影响设备"></a>影响设备</h3><p>linux dhclient</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Red Hat Enterprise Linux 6 and 7, Fedora 28, and earlier</p>
<p>versions of before dhclient-4.2.5-68.el7 are vulnerable.</p>
<p>经测试，Red Hat Enterprise Linux 7.7 7.6中已修复，最新可用版本是7.5</p>
<h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><p>/etc/NetworkManager/dispatcher.d/11-dhclient脚本中的eval对dhcp option的解析过程可以执行命令</p>
<p><img src="/CVE-2018-1111%E5%A4%8D%E7%8E%B0/1.png" alt="11-dhclient脚本"></p>
<p>declare会进行两项操作：</p>
<ol>
<li>如果变量包含特殊字符（例如空格或单引号），则会在两侧添加单引号，即’。</li>
<li>它会将内部单引号’转换为’\”（将一个字符转换为四个字符）。</li>
</ol>
<p>由于没有对引号进行转义，并且，后面有一个＆符号，所以，这就允许我们在这个eval()语句后面附加一个额外的命令。</p>
<p>我们原本的252 option是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#39;&amp;&#123;payload&#125; #</span><br></pre></td></tr></table></figure>

<p>原本的dhclient代码操作后会变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x\&#39;\&amp;&#123;payload&#125; #</span><br></pre></td></tr></table></figure>

<p>declare的输出就会变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;x\&#39;\”\&amp;&#123;payload&#125; #&#39;</span><br></pre></td></tr></table></figure>

<p>然后根据 echo “export $optname=$optvalue” 可以执行如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval &quot;$(echo &quot;export new_wpad&#x3D;&#39;x&#39;”&amp;&#123;payload&#125; #&#39; &quot;)&quot;</span><br></pre></td></tr></table></figure>

<p>同样，也可以用｜和；来进行攻击</p>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>复现过程其实很简单，利用虚拟机搭建一个虚拟网络，攻击机作为dhcp服务器给靶机提供带有option252的dhcp服务，payload作为option252的value发送到靶机。</p>
<p>复现环境搭建是使用ubuntu 16.04作为攻击机, Red Hat Enterprise Linux 7.0作为靶机。githun上有一个用dockerfile搭建的复现环境,但是通过yum安装的软件版本已经是漏洞修复过的，所以只能参考一下。</p>
<p>twitter中给出的poc是利用dnsmasq作为dhcp服务器实现的。</p>
<p>通过复现实现了相关nc后门、reboot、以root权限创建文件。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://cve.circl.lu/cve/CVE-2018-1111">影响版本详细1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1111#match-3892890">影响版本详细2</a></li>
<li><a href="https://github.com/kkirsche/CVE-2018-1111">exp</a></li>
<li><a href="https://www.exploit-db.com/exploits/44890">exp from exploit-db1</a></li>
<li><a href="https://www.exploit-db.com/exploits/44652">exp from exploit-db2</a></li>
<li><a href="https://github.com/knqyf263/CVE-2018-1111">docker环境</a></li>
<li><a href="https://n0j.github.io/2018/05/16/cve-2018-1111.html">漏洞分析1</a></li>
<li><a href="https://unit42.paloaltonetworks.com/unit42-analysis-dhcp-client-script-code-execution-vulnerability-cve-2018-1111/">漏洞分析2</a></li>
<li><a href="https://twitter.com/Barknkilic/status/996470756283486209">漏洞发现twitter</a></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>dhcp_ld</tag>
      </tags>
  </entry>
  <entry>
    <title>Fuzzification:Anti-Fuzzing Techniques</title>
    <url>/Fuzzification-Anti-Fuzzing-Techniques/</url>
    <content><![CDATA[<h2 id="文献题目"><a href="#文献题目" class="headerlink" title="文献题目"></a>文献题目</h2><p>Fuzzification:Anti-Fuzzing Techniques</p>
<h2 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h2><p>2019 USENIX Security</p>
<h2 id="文献作者"><a href="#文献作者" class="headerlink" title="文献作者"></a>文献作者</h2><p>Jinho Jung, Hong Hu, David Solodukhin, Daniel Pagan, Kyu Hyung Lee, Taesoo Kim</p>
<p>Georgia Institute of Technology 、University of Georgia</p>
<h2 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h2><p>模糊测试作为一种软件测试技术，也被黑客用来发现0-day漏洞进行恶意攻击。为了保护二进制软件免受恶意的fuzz攻击，作者在本文中提出了一种叫fuzzification的技术方案。该技术会减缓攻击者fuzz的过程，增加开销并减少其发现的漏洞数量以及效率。作者最后对fuzzification进行评估实验，实验过程较完整，而且效果较好。</p>
<h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><p>文章提出现在开发人员的需求是他们自己或者可信方来暴露产品的漏洞，而不是攻击者，下图展示了工作流程，开发人员将代码编译为两个版本：一个是Fuzzification技术编译出的受保护的二进制，一个是正常编译生成的二进制。而第一个版本被公开给所有人包括攻击者，第二个版本被公开给可信方。</p>
<p><img src="/Fuzzification-Anti-Fuzzing-Techniques/1.png" alt="工作流程"></p>
<p>Fuzzification的技术目标：</p>
<ul>
<li>Efficetive：有效减少发现的bug</li>
<li>Generc：适用于大多数的fuzzer</li>
<li>Efficient：给正常执行的程序带来很小的开销</li>
<li>Robust：抵抗对抗性分析的能力</li>
</ul>
<p>作者提出了三种Fuzzification的技术：</p>
<ul>
<li>SpeedBump：将细粒度的延迟原语注入到fuzz时经常接触但正常执行很少使用的cold path中</li>
<li>BranchTrap：构造对输入敏感的分支以浪费fuzz时的精力，并有意让代码覆盖区充满频繁的路径冲突使fuzzer无法识别触发新路径的输入</li>
<li>AntiHybrid：将显式数据流转换为隐式数据流防止污点分析的数据流跟踪；在符号执行过程中插入大量虚假符号触发路径爆炸</li>
</ul>
<h3 id="SpeedBump"><a href="#SpeedBump" class="headerlink" title="SpeedBump"></a>SpeedBump</h3><p>该技术的原理是cold path注入延迟会大大降低fuzz执行的速度，但不会对常规执行产生太大影响。</p>
<p>其主要方法是首先从测试用例中确定cold path，然后将延迟注入到最少执行的代码路径。工具自动确定注入延迟的路径数量以及每个延迟大小，使正常执行过程中受保护的二进制文件产生的开销在用户定义的预算内。</p>
<p>作者设计了基于CSmith的原语，可以生成随机的没有错误的代码片段，带有精确的选项，用于对抗程序分析中对简单延迟原语的识别和移动。下图是原语的一个例子。</p>
<p><img src="/Fuzzification-Anti-Fuzzing-Techniques/2.png" alt="原语"></p>
<p>作者用CSmith和Fuzzification的安全检查来保证生成代码的正确性。</p>
<h3 id="BranchTrap"><a href="#BranchTrap" class="headerlink" title="BranchTrap"></a>BranchTrap</h3><p>该技术原理是通过误导或组织覆盖反馈来欺骗基于覆盖的fuzzer。</p>
<p>其第一种方法就是构造大量的分支条件和间接跳转，并将其注入到原程序中，跳转的过程与输入的字节有较大的关系，即输入略有变化也会让路径发生改变。</p>
<p>作者考虑了四个设计方面：足够数量的伪造路径；尽可能小的开销；路径由用户的输入确定；无法被轻易识别或删除。</p>
<p>BranchTrap的一个简单实现是注入一个跳转表，使一些输入字节可以访问该表的索引，并且结合类似ROP的方法，整个过程分为三步：</p>
<ul>
<li>首先，BranchTrap从程序汇编代码中收集函数结尾（function epilogues）。</li>
<li>其次，将具有相同指令序列的函数结尾分组到一个跳转表中</li>
<li>最后，重写程序集，以便该函数使用一些输入字节作为跳转表索引，从相应的跳转表中检索几个等效的结尾，以实现原始函数的返回</li>
</ul>
<p>其具有三个优点：</p>
<ul>
<li>Effective：控制流与用户输入突变一起不断敏感地变化从而引入足够数量的无效路径，使coverage feedback效果降低。且BranchTrap保证路径确定性，从而使fuzzer不会忽略这些伪造路径。</li>
<li>Low overhead：轻量级的操作（XOR；解析跳转地址；跳转到gadget）为普通用户造成的开销低。</li>
<li>Robust：基于ROP的设计大大增加了对手识别或修补二进制文件的复杂性。</li>
</ul>
<p>BranchTrap的第二种方法是使fuzzing state饱和，目标是防止fuzzer找到真正有用的输入数据。实现方法是向程序插入大量的分支，并且在一些很少访问的基本块中引入大量的确定性分支。</p>
<h3 id="AntiHybrid"><a href="#AntiHybrid" class="headerlink" title="AntiHybrid"></a>AntiHybrid</h3><p>该技术将原始程序中的显式数据流转换为隐式数据流，以防止污点分析。Fuzzification首先确定分支条件和有趣的信息sink（如strcmp），然后根据变量类型注入数据流转换代码。</p>
<p><img src="/Fuzzification-Anti-Fuzzing-Techniques/3.png" alt="AntiHybrid技术示例"></p>
<p>隐式数据流阻碍了跟踪直接数据传播的数据流分析。但它无法通过差异分析来防止数据依赖性推断。</p>
<p>为了阻止使用符号执行的混合fuzzer，Fuzzification注入多个代码块以有意触发路径爆炸。具体来说，通过比较原始操作数的哈希值来替换每个比较指令。采用哈希函数是因为符号执行无法轻松确定具有给定哈希值的原始操作数。由于哈希函数通常会在程序执行中引入不可忽略的开销，因此作者利用轻量级的循环冗余校验（CRC）循环迭代来转换分支条件以减少性能开销。</p>
<h3 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h3><p>下图是整个系统的概述。输入：程序源代码、一组常用测试用例以及开销预算，输出：Fuzzification技术保护的二进制文件。大致步骤如下：编译生成正常的二进制文件，运行测试用例收集基本块频率，找到正常执行很少使用的基本块；根据配置文件将三种FUZZIFICATION技术应用于该程序并生成临时的受保护二进制文件；用正常测试用例再次测临时二进制文件的开销。如果开销超出预算，则返回到步骤2，以减少程序的slowdown。如果开销远低于预算，我们会相应增加开销；开销极限逼近预算，将生成受保护的二进制文件。</p>
<p><img src="/Fuzzification-Anti-Fuzzing-Techniques/4.png" alt="系统设计"></p>
<h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>LAVA-M数据集和九个真实世界的程序（libjpeg, libpng, libtiff, pcre2, readelf,objdump, nm, objcopy, and MuPDF）</p>
<p>使用AFL、HongFuzz、VUzzer、QSym进行fuzz原始程序和受保护的程序。</p>
<p>发现的bug减少了95%，从LAVA-M数据集发现的减少了67.5%。在保持用户指定的开销预算同时覆盖率也降低了70.3%。而且数据流和控制流分析技术无法移除Fuzzification技术。</p>
]]></content>
      <categories>
        <category>文献阅读笔记</category>
      </categories>
      <tags>
        <tag>anti-fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>cisco_dhcp_configure</title>
    <url>/cisco-dhcp-configure/</url>
    <content><![CDATA[<p>cisco_dhcp server配置</p>
<h2 id="1-Dhcp-server开启"><a href="#1-Dhcp-server开启" class="headerlink" title="1. Dhcp server开启"></a>1. Dhcp server开启</h2><p>​    </p>
<figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">cisco&gt; enable</span><br><span class="line">cisco# configure terminal</span><br><span class="line">cisco(config)# service dhcp</span><br><span class="line">cisco(config)# ip dhcp pool cisco</span><br><span class="line">cisco(config)# network 192.168.1.0 255.255.255.0</span><br><span class="line">cisco(config)# default-router 192.168.1.1</span><br><span class="line">cisco(config)# lease 3</span><br><span class="line">cisco(config)# exit</span><br></pre></td></tr></table></figure>



<h2 id="2-开启端口"><a href="#2-开启端口" class="headerlink" title="2. 开启端口"></a>2. 开启端口</h2><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">cisco(config)# interface f1</span><br><span class="line">cisco(config)# no shutdown</span><br><span class="line">cisco(config)# ip address 192.168.1.1 255.255.255.0</span><br></pre></td></tr></table></figure>

<p>这里的f1是设备的一个端口名称，可以用show run命令查看</p>
<figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">show ip dhcp binding  # 显示地址分配情况</span><br><span class="line">shou ip dhcp conflict # 显示地址冲突情况</span><br><span class="line">clear ip dhcp binding 192.168.1.1 # 清理已经分配的ip</span><br></pre></td></tr></table></figure>



<h2 id="3-Dhcp-relay配置"><a href="#3-Dhcp-relay配置" class="headerlink" title="3. Dhcp relay配置"></a>3. Dhcp relay配置</h2><p>​    </p>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>cisco</tag>
        <tag>dhcp_configure</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2017-14429复现</title>
    <url>/cve-2017-14429%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>漏洞复现</p>
<h2 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h2><p>cve-2017-14429</p>
<h2 id="漏洞效果"><a href="#漏洞效果" class="headerlink" title="漏洞效果"></a>漏洞效果</h2><p>可以以root用户的身份执行代码</p>
<h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><ul>
<li>D-Link Dir-850l Firmware Fw114wwb07 H2ab Beta1</li>
<li>D-Link Dir-850l Firmware Fw208wwb02</li>
</ul>
<h2 id="漏洞复现过程"><a href="#漏洞复现过程" class="headerlink" title="漏洞复现过程"></a>漏洞复现过程</h2><h3 id="telnet-backdoor"><a href="#telnet-backdoor" class="headerlink" title="telnet backdoor"></a>telnet backdoor</h3><p>login：Alphanetworks;wrgac25_dlink.2013gui_dir850l</p>
<p>这个后门只有设备在重置后才会存在</p>
<h3 id="复现简述"><a href="#复现简述" class="headerlink" title="复现简述"></a>复现简述</h3><p>cvedetails上面提供的影响版本是这两个，但是漏洞发现作者说只影响revb版本的，由于a版本的我也没有做实验，不太确定是否影响。</p>
<p>该漏洞的利用过程是配置一个dhcpd的环境，router作为客户端连接主机并向主机请求ip地址从而实现利用。</p>
<h3 id="dhcpd环境配置"><a href="#dhcpd环境配置" class="headerlink" title="dhcpd环境配置"></a>dhcpd环境配置</h3><p>安装dhcp服务器</p>
<p>sudo apt install isc-dhcp-serve</p>
<p>sudo cat /etc/dhcp/dhcpd.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">option domain-name &quot;;reboot;&quot;;</span><br><span class="line">option domain-name-servers 8.8.8.8, 8.8.4.4;</span><br><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">ddns-update-style none;</span><br><span class="line">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class="line">  range 10.254.239.10 10.254.239.20;</span><br><span class="line">  option routers 10.254.239.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里分配的ip地址要和网卡的ip相对应，而且要设成静态ip。</p>
<p>启动dhcpd:</p>
<p>​    sudo dhcpd -4 -f</p>
<p>如果报错无法加载dhcpd.leases,执行以下命令：</p>
<p>​    sudo rm -f /var/lib/dhcp/dhcpd.leases</p>
<p>​    sudo touch /var/lib/dhcp/dhcpd.leases</p>
<h3 id="路由器连接设置"><a href="#路由器连接设置" class="headerlink" title="路由器连接设置"></a>路由器连接设置</h3><p>需要进路由器页面设置为dhcp获取ip,然后将wan口和主机连接，连接的网卡是之前设置静态ip的网卡。</p>
<h3 id="初步结果"><a href="#初步结果" class="headerlink" title="初步结果"></a>初步结果</h3><p>可以观察到路由器在启动后，两个指示灯都会变成黄灯，随即路由器开始重启，第一个变成黄色，第二个熄灭，表示重启过程。然后这个过程会一直重复。下图是用wireshark抓包的整个过程。</p>
<p><img src="/cve-2017-14429%E5%A4%8D%E7%8E%B0/1.png" alt="wireshark抓包"></p>
<h2 id="后续利用分析"><a href="#后续利用分析" class="headerlink" title="后续利用分析"></a>后续利用分析</h2><p>漏洞的作者在博客中的利用是通过路由器的wget上传一个telnet服务器，可以从wan口进行telnet连接。由于无法实现可以在router系统上执行的程序，所以寻找其他的办法。</p>
<p>路由器上存在着一个telnet的后门，但是只有路由器reset后才能启用这个后门，之后如果路由器重启的话就消失了。</p>
<p>如果按照启用这个后门的脚本重新写一个传进路由器的系统中执行，是不是可以重新开启这个后门。但是所编译后的程序都无法在系统中执行，报错为ELF：not found。</p>
<h2 id="附录1-b类型固件解密代码"><a href="#附录1-b类型固件解密代码" class="headerlink" title="附录1  b类型固件解密代码"></a>附录1  b类型固件解密代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Simple tool to decrypt D-LINK DIR-850L REVB firmwares </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $ gcc -o revbdec revbdec.c</span></span><br><span class="line"><span class="comment"> * $ ./revbdec DIR850L_REVB_FW207WWb05_h1ke_beta1.bin wrgac25_dlink.2013gui_dir850l &gt; DIR850L_REVB_FW207WWb05_h1ke_beta1.decrypted</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USAGE <span class="meta-string">&quot;Usage: decimg &lt;filename&gt; &lt;key&gt;\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>    argc,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">char</span>   **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>     i, fi;</span><br><span class="line">        <span class="keyword">int</span>     fo = STDOUT_FILENO, fe = STDERR_FILENO;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                write(fe, USAGE, <span class="built_in">strlen</span>(USAGE));</span><br><span class="line">                <span class="keyword">return</span> (EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((fi = open(argv[<span class="number">1</span>], O_RDONLY)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">                write(fe, USAGE, <span class="built_in">strlen</span>(USAGE));</span><br><span class="line">                <span class="keyword">return</span> (EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *key = argv[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> kl = <span class="built_in">strlen</span>(key);</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">                <span class="keyword">int</span> j, len;</span><br><span class="line">                len = read(fi, buffer, <span class="number">4096</span>);</span><br><span class="line">                <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                        buffer[j] ^= (i + j) % <span class="number">0xFB</span> + <span class="number">1</span>;</span><br><span class="line">                        buffer[j] ^= key[(i + j) % kl];</span><br><span class="line">                &#125;</span><br><span class="line">                write(fo, buffer, len);</span><br><span class="line">                i += len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="附录2-dlink固件下载地址"><a href="#附录2-dlink固件下载地址" class="headerlink" title="附录2 dlink固件下载地址"></a>附录2 dlink固件下载地址</h2><ol>
<li><a href="http://files.dlink.com.au/products/">http://files.dlink.com.au/products/</a></li>
<li><a href="ftp://ftp2.dlink.com/">ftp://ftp2.dlink.com/</a></li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html#pre-auth-root-rces">https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html#pre-auth-root-rces</a></p>
</li>
<li><p><a href="https://pierrekim.github.io/blog/2017-09-21-update-dlink-850l-mydlink-cloud-0days-vulnerabilities.html">https://pierrekim.github.io/blog/2017-09-21-update-dlink-850l-mydlink-cloud-0days-vulnerabilities.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>dhcp_ld</tag>
        <tag>dlink</tag>
      </tags>
  </entry>
  <entry>
    <title>netzob语言规范</title>
    <url>/netzob%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>netzob描述语言（ZDL）是netzob公开的应用编程的接口，用于对通信协议中使用的数据结构进行建模。这种文本语言的设计是为了便于人类理解。它使用户能够通过专用的.zdl文件，独立于API和库的核心。ZDL语言的设计注重其表现力。本章首先介绍了ZDL语言的主要概念，然后解释了它在数据类型、约束和关系方面的表达能力。</p>
<h2 id="报文格式建模"><a href="#报文格式建模" class="headerlink" title="报文格式建模"></a>报文格式建模</h2><h3 id="报文格式建模概念"><a href="#报文格式建模概念" class="headerlink" title="报文格式建模概念"></a>报文格式建模概念</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>协议的词汇表定义了一组有效的消息及其格式。在库中，协议的词汇表由一系列符号组成。从协议的角度来看，符号代表所有具有相似目标的消息。例如，HTTP_GET符号将描述任何设置了GET方法的HTTP请求。一个符号可以被专门化为一个上下文有效的消息，一个消息可以被抽象为一个符号。</p>
<h4 id="symbols的抽象化和特殊化"><a href="#symbols的抽象化和特殊化" class="headerlink" title="symbols的抽象化和特殊化"></a>symbols的抽象化和特殊化</h4><h3 id="data-type建模"><a href="#data-type建模" class="headerlink" title="data type建模"></a>data type建模</h3><h4 id="数据类型API"><a href="#数据类型API" class="headerlink" title="数据类型API"></a>数据类型API</h4><h4 id="分析数据类型"><a href="#分析数据类型" class="headerlink" title="分析数据类型"></a>分析数据类型</h4><h3 id="data-variables-建模"><a href="#data-variables-建模" class="headerlink" title="data variables 建模"></a>data variables 建模</h3><h3 id="Fields-建模"><a href="#Fields-建模" class="headerlink" title="Fields 建模"></a>Fields 建模</h3><h3 id="复杂结构的fields建模"><a href="#复杂结构的fields建模" class="headerlink" title="复杂结构的fields建模"></a>复杂结构的fields建模</h3><h4 id="Aggregate-Domain"><a href="#Aggregate-Domain" class="headerlink" title="Aggregate Domain"></a>Aggregate Domain</h4><h4 id="Alternate-Domain"><a href="#Alternate-Domain" class="headerlink" title="Alternate Domain"></a>Alternate Domain</h4><h4 id="Repeat-Domain"><a href="#Repeat-Domain" class="headerlink" title="Repeat Domain"></a>Repeat Domain</h4><h3 id="field-关系建模"><a href="#field-关系建模" class="headerlink" title="field 关系建模"></a>field 关系建模</h3><h4 id="数值关系"><a href="#数值关系" class="headerlink" title="数值关系"></a>数值关系</h4><h4 id="大小关系"><a href="#大小关系" class="headerlink" title="大小关系"></a>大小关系</h4><h4 id="填充关系"><a href="#填充关系" class="headerlink" title="填充关系"></a>填充关系</h4><h4 id="checksum关系"><a href="#checksum关系" class="headerlink" title="checksum关系"></a>checksum关系</h4><h4 id="hash关系"><a href="#hash关系" class="headerlink" title="hash关系"></a>hash关系</h4><h4 id="HMAC关系"><a href="#HMAC关系" class="headerlink" title="HMAC关系"></a>HMAC关系</h4><h3 id="symbols-建模"><a href="#symbols-建模" class="headerlink" title="symbols 建模"></a>symbols 建模</h3><h3 id="symbols-persistence"><a href="#symbols-persistence" class="headerlink" title="symbols persistence"></a>symbols persistence</h3><h2 id="发送和接收报文"><a href="#发送和接收报文" class="headerlink" title="发送和接收报文"></a>发送和接收报文</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h3 id="通信渠道API"><a href="#通信渠道API" class="headerlink" title="通信渠道API"></a>通信渠道API</h3><h3 id="可利用的通信渠道"><a href="#可利用的通信渠道" class="headerlink" title="可利用的通信渠道"></a>可利用的通信渠道</h3><h4 id="RawEthernetChannel-channel"><a href="#RawEthernetChannel-channel" class="headerlink" title="RawEthernetChannel channel"></a>RawEthernetChannel channel</h4><h4 id="RawIPChannel-channel"><a href="#RawIPChannel-channel" class="headerlink" title="RawIPChannel channel"></a>RawIPChannel channel</h4><h4 id="IPChannel-channel"><a href="#IPChannel-channel" class="headerlink" title="IPChannel channel"></a>IPChannel channel</h4><h4 id="UDPClient-channel"><a href="#UDPClient-channel" class="headerlink" title="UDPClient channel"></a>UDPClient channel</h4><h4 id="TCPClient-channel"><a href="#TCPClient-channel" class="headerlink" title="TCPClient channel"></a>TCPClient channel</h4><h4 id="UDPServer-channel"><a href="#UDPServer-channel" class="headerlink" title="UDPServer channel"></a>UDPServer channel</h4><h4 id="TCPServer-channel"><a href="#TCPServer-channel" class="headerlink" title="TCPServer channel"></a>TCPServer channel</h4><h4 id="SSLClient-channel"><a href="#SSLClient-channel" class="headerlink" title="SSLClient channel"></a>SSLClient channel</h4><h4 id="DebugChannel-channel"><a href="#DebugChannel-channel" class="headerlink" title="DebugChannel channel"></a>DebugChannel channel</h4><h3 id="抽象层"><a href="#抽象层" class="headerlink" title="抽象层"></a>抽象层</h3><h3 id="报文和环境的关系"><a href="#报文和环境的关系" class="headerlink" title="报文和环境的关系"></a>报文和环境的关系</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2>]]></content>
      <categories>
        <category>netzob</category>
      </categories>
      <tags>
        <tag>netzob</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>littlewhite,Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>qnap_nas_releated</title>
    <url>/qnap-nas-releated/</url>
    <content><![CDATA[<p>和qnap nas相关的一些记录,会一直更新。</p>
<p>qnap nas设备的os应该是arm架构的</p>
<h2 id="1-固件解包"><a href="#1-固件解包" class="headerlink" title="1. 固件解包"></a>1. 固件解包</h2><p>Qnap nas固件的解包用binwalk无法成功，Fireware Mod Kit我不怎么用，所以也没去尝试。经过调研发现其固件都是经过加密的，密钥都是“QNAPNASVERSION4”，所以可以利用公开的一些工具进行解压，可以看后面的参考1-5.</p>
<p>PC1和PC2这两个程序是nas os里面使用的解密/加密脚本，参考5就是PC1的pthon3实现，参考1的工具也需要PC1这个程序。</p>
<p>解密的命令大致类似</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> PC1 d  QNAPNASVERSION4 source.img dest.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>命令执行完就是解压下压缩包就是包的内容了</p>
<p>我测试的时候只用了PC1（从nas设备里面拷贝出的，不是我编译参考2出来的，编译可能要在arm环境下）和python的脚本，这两个解出来的是一样的。</p>
<p>参考中的部分脚本我也放到了自己的github中，在some_iot里面，欢迎star。</p>
<h2 id="2-设备挂载U盘"><a href="#2-设备挂载U盘" class="headerlink" title="2. 设备挂载U盘"></a>2. 设备挂载U盘</h2><p>查看U盘信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fdisk -l</span></span><br></pre></td></tr></table></figure>

<p>这时候最后会出现你插入U盘的信息，差不多是下面图这样。</p>
<p><img src="/qnap-nas-releated/1.png" alt="usb_info"></p>
<p>挂载U盘, sdb1根据实际情况修改，mmc_sd文件夹提示没有的话可以用mkdir创建一个，qnap的os里面支持的unix命令还是挺多的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mount -t vfat /dev/sdb1 /mnt/mmc_sd/</span></span><br></pre></td></tr></table></figure>

<p>然后后面进到mmc_sd文件夹里面就可以看到U盘的文件了。</p>
<p>卸载U盘，执行命令时要推出当前目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umount /mnt/mmc_sd</span><br></pre></td></tr></table></figure>

<p>如果无法卸载的话看一看相关的进程然后kill掉就可以了</p>
<p>挂载U盘有一个好处就是可以copy系统里的文件拿出来分析，也可以执行系统里的命令处理U盘里的文件，比如PC1命令。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/max-boehm/qnap-utils">公开工具qnap-utils</a></li>
<li><a href="https://sites.google.com/site/nliaudat/nas/test2/qnap401t-decryptencryptfirmware">PC1 &amp;&amp; PC2源码分享</a></li>
<li><a href="https://island123.github.io/2019/03/14/2019-03-14-QNAP%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%8E%8B%E5%8F%8A%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BE%85%E5%8A%A9%E8%84%9A%E6%9C%AC/#%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%8E%8B">qnap解包和辅助脚本</a></li>
<li><a href="https://github.com/qnap-dev/qdk2">一个比较复杂的解包程序</a></li>
<li><a href="https://gist.github.com/ulidtko/966277a465f1856109b2d2674dcee741">python解包脚本</a></li>
</ol>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>nas</tag>
      </tags>
  </entry>
</search>
